Part 1: Discussion Questions

Runtime:
1)
    The workload is determined by the number of animal crackers are in the box. 
2)
    O(1)
    O(log n)
    O(n)
    O(n log n)
    O(n^2)
    O(2^n)

Stacks and Queues:
1)
    1. stack
    2. queue
    3. stack
2)
    1. Stocking grocery store shelves - rotating the 
    oldest product to the front.
    2. A call que: "You are currently the 3,387th caller.
    Your call is important to us and will be answered in
    the order we receied it. We appreciate your patience."
3)
    1. The stack of paper you put in to the printer paper 
    tray (it pulls from the top of the stack). 
    2. Folding laundry - grab an arm full of items out of 
    the dryer and put them in the basket, then grab the
    next armfull and put them in the basket - when you go 
    to fold the laundry you grab an item off the top of
    the basket and fold it (you generally aren't going to
    pull from the bottom of the basket.)

Linked Lists:
1)
    Nodes:  apple_node > the box w/ "Apple" and next attributes
            berry_node > the box w/ "Berry" and next attributes
            cherry_node> the box w/ "Cherry" and next attributes
            LLIST is a node with a head attribute
    Data:   apple_node.data = "Apple"
            berry_node.data = "Berry"
            cherry_node.data = "Cherry"
    LLLIST.head = apple_node
    The tail of the list is the cherry_node as the next attrubute currently points to None, however the tail is not being tracked by the LLIST class.
2)
    A singly-linked list is where each node has a data attribute and a next attribute where the next attribute points to the next item in the list. It can only be traversed in on direction. 
    A doubly-linked list has a data, next and previous attributes. The previous attribute points to the previous node, so you are able to go backwards on the list as well as forward.
3)
    If we are keeping track of the tail, we are able to go right to the tail node and reassign the next attribute to the node you are trying to add and reassigning where the tail points to. If you are not tracking the tail, you have no idea which node is the last, so you have to traverse the entire list until you find the node with the next attribute None. If you have a short list, that is fine, but as the list gets longer, this becomes a potential problem. 

Trees:
1)  
    food
    Italian
    Indian
    Mexican
    lasagna
    pizza 
    tikka masala
    saag
    burritos

2)  
    food
    Mexican
    enchiladas
    tacos
    burritos
    Indian
    saag
    tikka masala
    Italian
    pizza
    Sicilian
    New York-Style
    Chicago-style
3)  
    A binary search tree is a tree where the root (if
    assembled correctly/balanced) is the center/median
    value of an array and the items stem off of each node
    in one of two ways - greater in value or lesser in 
    value of each subsequent node. A regular tree can have
    an unlimited number of children nodes, but in a BST,
    each node can have only 2.
































